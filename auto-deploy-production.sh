#!/bin/bash

echo "üöÄ AUTO-D√âPLOIEMENT PRODUCTION - RESTAURANT LA MANGEOIRE"
echo "======================================================="
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }
info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "confirmation-commande.php" ]; then
    error "Veuillez ex√©cuter ce script depuis le r√©pertoire racine du projet"
    exit 1
fi

echo "1Ô∏è‚É£  CONFIGURATION DES FICHIERS DE PRODUCTION"
echo "============================================"

# Sauvegarder la configuration actuelle
if [ -f ".env" ]; then
    cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
    success "Sauvegarde de .env cr√©√©e"
fi

# Configurer HTTPS en production
if [ -f ".env" ]; then
    # Passer FORCE_HTTPS √† true
    if grep -q "FORCE_HTTPS=" .env; then
        sed -i.bak 's/FORCE_HTTPS=false/FORCE_HTTPS=true/' .env
        success "FORCE_HTTPS activ√© pour la production"
    else
        echo "FORCE_HTTPS=true" >> .env
        success "FORCE_HTTPS ajout√© au fichier .env"
    fi
    
    # Configurer l'environnement de production
    if grep -q "APP_ENV=" .env; then
        sed -i.bak 's/APP_ENV=development/APP_ENV=production/' .env
    else
        echo "APP_ENV=production" >> .env
    fi
    
    if grep -q "APP_DEBUG=" .env; then
        sed -i.bak 's/APP_DEBUG=true/APP_DEBUG=false/' .env
    else
        echo "APP_DEBUG=false" >> .env
    fi
    
    success "Configuration production activ√©e"
fi

# Copier la configuration .htaccess
if [ -f ".htaccess-production" ]; then
    cp .htaccess-production .htaccess
    
    # D√©commenter les r√®gles HTTPS
    sed -i.bak 's/# RewriteCond %{HTTPS} off/RewriteCond %{HTTPS} off/' .htaccess
    sed -i.bak 's/# RewriteCond %{HTTP_X_FORWARDED_PROTO} !https/RewriteCond %{HTTP_X_FORWARDED_PROTO} !https/' .htaccess
    sed -i.bak 's/# RewriteRule \^\(.*\)\$ https:\/\/%{HTTP_HOST}%{REQUEST_URI} \[R=301,L\]/RewriteRule ^(.*)$ https:\/\/%{HTTP_HOST}%{REQUEST_URI} [R=301,L]/' .htaccess
    
    success "Configuration .htaccess de production activ√©e avec HTTPS forc√©"
else
    warning "Fichier .htaccess-production non trouv√©"
fi

echo ""
echo "2Ô∏è‚É£  OPTIMISATION ET S√âCURISATION"
echo "================================"

# Optimiser Composer pour la production
if command -v composer &> /dev/null; then
    info "Optimisation des d√©pendances Composer..."
    composer install --no-dev --optimize-autoloader --no-interaction
    success "D√©pendances Composer optimis√©es"
else
    warning "Composer non trouv√© - optimisation manuelle requise"
fi

# Cr√©er les dossiers de logs s'ils n'existent pas
mkdir -p logs/payments logs/errors logs/access
success "Dossiers de logs cr√©√©s"

# S√©curiser les permissions des fichiers
chmod 644 .env 2>/dev/null || true
chmod 644 *.php 2>/dev/null || true
chmod 755 logs 2>/dev/null || true
chmod 755 includes 2>/dev/null || true
success "Permissions des fichiers s√©curis√©es"

echo ""
echo "3Ô∏è‚É£  MISE √Ä JOUR DU DASHBOARD ADMIN"
echo "=================================="

# Sauvegarder l'ancien dashboard
if [ -f "dashboard-admin.php" ]; then
    cp dashboard-admin.php dashboard-admin-backup-$(date +%Y%m%d_%H%M%S).php
    success "Sauvegarde de l'ancien dashboard cr√©√©e"
fi

# Remplacer par le nouveau dashboard am√©lior√©
if [ -f "dashboard-admin-enhanced.php" ]; then
    cp dashboard-admin-enhanced.php dashboard-admin.php
    success "Dashboard administrateur mis √† jour avec monitoring paiements"
else
    warning "Dashboard am√©lior√© non trouv√©"
fi

echo ""
echo "4Ô∏è‚É£  CONFIGURATION DES LOGS DE MONITORING"
echo "========================================"

# Cr√©er le fichier de configuration des logs
cat > logs/log-config.php << 'EOF'
<?php
/**
 * Configuration des logs - La Mangeoire
 */

// Niveau de logging (ERROR, WARNING, INFO, DEBUG)
define('LOG_LEVEL', 'INFO');

// Rotation des logs (en jours)
define('LOG_ROTATION_DAYS', 30);

// Taille maximale des fichiers de logs (en MB)
define('LOG_MAX_SIZE', 50);

// Formats de logs
define('LOG_FORMAT_PAYMENT', '[%s] %s - %s | Client: %s | Montant: %s‚Ç¨ | Statut: %s');
define('LOG_FORMAT_ERROR', '[%s] ERROR - %s | File: %s | Line: %s');
define('LOG_FORMAT_ACCESS', '[%s] %s - %s | IP: %s | User-Agent: %s');

// Emails d'alerte
define('ALERT_EMAIL', 'admin@votredomaine.com');
define('ALERT_THRESHOLD_ERRORS', 10); // Nombre d'erreurs avant alerte
?>
EOF

success "Configuration des logs cr√©√©e"

# Cr√©er le script de nettoyage des logs
cat > logs/cleanup-logs.sh << 'EOF'
#!/bin/bash
# Nettoyage automatique des logs anciens
find /path/to/your/site/logs -name "*.log" -mtime +30 -delete
find /path/to/your/site/logs -name "*.log.*" -mtime +30 -delete
echo "$(date): Nettoyage des logs termin√©" >> /path/to/your/site/logs/cleanup.log
EOF

chmod +x logs/cleanup-logs.sh
success "Script de nettoyage des logs cr√©√©"

echo ""
echo "5Ô∏è‚É£  TESTS DE CONFIGURATION"
echo "=========================="

# Test de syntaxe PHP
info "V√©rification de la syntaxe PHP..."
php_errors=0

for file in *.php includes/*.php api/*.php; do
    if [ -f "$file" ]; then
        if ! php -l "$file" > /dev/null 2>&1; then
            error "Erreur de syntaxe dans $file"
            php_errors=$((php_errors + 1))
        fi
    fi
done

if [ $php_errors -eq 0 ]; then
    success "Aucune erreur de syntaxe PHP d√©tect√©e"
else
    error "$php_errors fichier(s) avec erreurs de syntaxe"
fi

# Test de connexion base de donn√©es
info "Test de connexion √† la base de donn√©es..."
if php -r "
require_once 'db_connexion.php';
try {
    \$stmt = \$pdo->query('SELECT 1');
    echo 'OK';
} catch(Exception \$e) {
    echo 'ERROR: ' . \$e->getMessage();
}
" | grep -q "OK"; then
    success "Connexion √† la base de donn√©es r√©ussie"
else
    error "Probl√®me de connexion √† la base de donn√©es"
fi

# Test des cl√©s API
info "V√©rification des cl√©s API..."
if grep -q "pk_live_" .env && grep -q "sk_live_" .env; then
    success "Cl√©s Stripe LIVE d√©tect√©es"
elif grep -q "pk_test_" .env && grep -q "sk_test_" .env; then
    warning "Cl√©s Stripe TEST d√©tect√©es - √Ä remplacer en production"
else
    error "Cl√©s Stripe manquantes"
fi

echo ""
echo "6Ô∏è‚É£  RECOMMANDATIONS FINALES"
echo "==========================="

info "Configuration termin√©e ! V√©rifiez les points suivants :"
echo ""
echo "üîê HTTPS ET CERTIFICAT SSL :"
echo "   ‚Ä¢ Configurez un certificat SSL (Let's Encrypt, Cloudflare, etc.)"
echo "   ‚Ä¢ Testez https://votredomaine.com"
echo "   ‚Ä¢ V√©rifiez la redirection HTTP ‚Üí HTTPS"
echo ""
echo "üîë CL√âS API DE PRODUCTION :"
echo "   ‚Ä¢ Stripe : Remplacez pk_test_ et sk_test_ par pk_live_ et sk_live_"
echo "   ‚Ä¢ PayPal : Passez du mode 'sandbox' au mode 'live'"
echo "   ‚Ä¢ Testez avec des paiements de petits montants"
echo ""
echo "üìß CONFIGURATION EMAIL :"
echo "   ‚Ä¢ V√©rifiez SMTP_* dans .env"
echo "   ‚Ä¢ Testez l'envoi d'emails de confirmation"
echo ""
echo "üóÑÔ∏è  BASE DE DONN√âES :"
echo "   ‚Ä¢ Configurez les sauvegardes automatiques"
echo "   ‚Ä¢ Optimisez les index et performances"
echo ""
echo "üìä MONITORING :"
echo "   ‚Ä¢ Acc√©dez √† dashboard-admin.php"
echo "   ‚Ä¢ Configurez les alertes par email"
echo "   ‚Ä¢ Surveillez les logs de paiements"
echo ""
echo "üîß MAINTENANCE :"
echo "   ‚Ä¢ Planifiez logs/cleanup-logs.sh dans cron"
echo "   ‚Ä¢ Surveillez l'espace disque"
echo "   ‚Ä¢ Mettez √† jour r√©guli√®rement"

echo ""
success "üéâ D√âPLOIEMENT AUTOMATIQUE TERMIN√â !"
echo ""
echo "üöÄ PROCHAINES √âTAPES :"
echo "   1. Configurez HTTPS sur votre serveur"
echo "   2. Remplacez les cl√©s API par celles de production"
echo "   3. Testez les paiements r√©els"
echo "   4. Surveillez le dashboard administrateur"
echo ""
echo "üìû En cas de probl√®me, consultez :"
echo "   ‚Ä¢ HTTPS_URGENT_GUIDE.md"
echo "   ‚Ä¢ CONFIGURATION_HTTPS_PRODUCTION.md"
echo "   ‚Ä¢ logs/errors/$(date +%Y-%m-%d).log"
echo ""

# Cr√©er un rapport de d√©ploiement
cat > deployment-report-$(date +%Y%m%d_%H%M%S).txt << EOF
RAPPORT DE D√âPLOIEMENT - RESTAURANT LA MANGEOIRE
================================================
Date: $(date)
Version: Production Ready 1.0

FICHIERS CONFIGUR√âS:
- .env (production)
- .htaccess (HTTPS forc√©)
- dashboard-admin.php (avec monitoring paiements)
- logs/ (structure cr√©√©e)

STATUT TESTS:
- Syntaxe PHP: $([[ $php_errors -eq 0 ]] && echo "‚úÖ OK" || echo "‚ùå $php_errors erreurs")
- Base de donn√©es: $(php -r "
require_once 'db_connexion.php';
try {
    \$stmt = \$pdo->query('SELECT 1');
    echo '‚úÖ OK';
} catch(Exception \$e) {
    echo '‚ùå ERROR';
}
")

ACTIONS REQUISES:
1. Configurer HTTPS/SSL
2. Remplacer cl√©s API test par production
3. Tester paiements r√©els
4. Configurer monitoring

SYST√àME PR√äT POUR LA PRODUCTION ! üöÄ
EOF

success "Rapport de d√©ploiement cr√©√© : deployment-report-$(date +%Y%m%d_%H%M%S).txt"
