#!/bin/bash
# Validation finale des m√©triques syst√®me r√©elles
# Date: 23 juin 2025

echo "üîç VALIDATION FINALE - M√©triques Syst√®me R√©elles"
echo "================================================"

# V√©rification des fichiers
echo ""
echo "üìÅ V√©rification des fichiers..."

files=("dashboard-admin.php" "includes/system-stats.php" "api/system-stats.php")

for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file existe"
        
        # V√©rification syntaxe PHP
        if php -l "$file" > /dev/null 2>&1; then
            echo "   ‚úÖ Syntaxe PHP correcte"
        else
            echo "   ‚ùå Erreur de syntaxe PHP"
        fi
    else
        echo "‚ùå $file manquant"
    fi
done

echo ""
echo "üîß V√©rification des fonctions syst√®me..."

# Test des fonctions
php -r "
require_once 'includes/system-stats.php';

echo 'üìä Test des m√©triques syst√®me:' . PHP_EOL;

// Test getSystemStats
try {
    \$stats = getSystemStats();
    echo '   ‚úÖ getSystemStats(): CPU=' . \$stats['cpu'] . '%, RAM=' . \$stats['memory'] . '%, Disk=' . \$stats['disk'] . '%' . PHP_EOL;
} catch (Exception \$e) {
    echo '   ‚ùå getSystemStats(): ' . \$e->getMessage() . PHP_EOL;
}

// Test getSystemUptime
try {
    \$uptime = getSystemUptime();
    echo '   ‚úÖ getSystemUptime(): ' . \$uptime . PHP_EOL;
} catch (Exception \$e) {
    echo '   ‚ùå getSystemUptime(): ' . \$e->getMessage() . PHP_EOL;
}

echo PHP_EOL;
"

echo "üîç V√©rification de l'int√©gration dashboard..."

# V√©rifier que dashboard-admin.php utilise les vraies fonctions
if grep -q "require_once 'includes/system-stats.php'" dashboard-admin.php; then
    echo "‚úÖ Dashboard utilise les fonctions syst√®me r√©elles"
else
    echo "‚ùå Dashboard n'utilise pas les fonctions syst√®me"
fi

if grep -q "getSystemStats()" dashboard-admin.php; then
    echo "‚úÖ Dashboard appelle getSystemStats()"
else
    echo "‚ùå Dashboard n'appelle pas getSystemStats()"
fi

echo ""
echo "üåê V√©rification API AJAX..."

# V√©rifier l'API
if grep -q "getSystemStats()" api/system-stats.php; then
    echo "‚úÖ API utilise les vraies m√©triques"
else
    echo "‚ùå API n'utilise pas les vraies m√©triques"
fi

echo ""
echo "üì± V√©rification JavaScript..."

# V√©rifier le JavaScript de mise √† jour
if grep -q "setInterval(updateSystemStats" dashboard-admin.php; then
    echo "‚úÖ Mise √† jour automatique configur√©e"
else
    echo "‚ùå Mise √† jour automatique manquante"
fi

if grep -q "api/system-stats.php" dashboard-admin.php; then
    echo "‚úÖ Connexion API configur√©e"
else
    echo "‚ùå Connexion API manquante"
fi

echo ""
echo "üéØ R√©sum√© des am√©liorations:"
echo "   ‚Ä¢ M√©triques CPU r√©elles (multiplateforme)"
echo "   ‚Ä¢ Utilisation m√©moire syst√®me (vs PHP uniquement)"
echo "   ‚Ä¢ Espace disque du syst√®me complet"
echo "   ‚Ä¢ Uptime syst√®me pr√©cis"
echo "   ‚Ä¢ Services syst√®me v√©rifi√©s dynamiquement"
echo "   ‚Ä¢ √âv√©nements bas√©s sur les donn√©es BDD"
echo "   ‚Ä¢ Mise √† jour automatique toutes les 30s"

echo ""
echo "üöÄ √âTAPES SUIVANTES:"
echo "   1. D√©marrer le serveur web local"
echo "   2. Se connecter en tant que superadmin"
echo "   3. Acc√©der √† dashboard-admin.php"
echo "   4. V√©rifier que les m√©triques sont r√©alistes"
echo "   5. Attendre 30s pour voir la mise √† jour automatique"

echo ""
echo "üéâ Configuration termin√©e avec succ√®s !"
